class Solution {
public:
    
    bool subsetSum(vector<int> nums, int n, int target)
    {
        bool dp[n+1][target+1];
        
        for(int i=0;i<n+1;i++)
            dp[i][0] = true;
        
        for(int j =1;j<target+1;j++)
            dp[0][j] = false;
        
        for(int i=1;i<n+1;i++)
        {
            for(int j =1;j<target+1; j++)
            {
                if(j >= nums[i-1])
                    dp[i][j] = dp[i-1][j - nums[i-1]] || dp[i-1][j];
                
                else
                    dp[i][j] = dp[i-1][j];
            }
        }
        
        return dp[n][target];
        
//         if(target == 0)
//             return true;
        
//         if(target < 0 || n == 0)
//             return 0;
        
//         return subsetSum(nums, n-1, target-nums[n-1]) || subsetSum(nums, n-1, target);
    }
    
    bool canPartition(vector<int>& nums) {
        
        int sum = 0;
        
        for(auto it : nums)
            sum += it;
        
        if(sum & 1)
            return false;
        
        return subsetSum(nums, nums.size(), sum/2);
        
    }
};