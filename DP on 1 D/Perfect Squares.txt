class Solution {
public:
    
    int minCoinChange(vector<int> perfect, int n, int target)
    {
        int dp[n+1][target+1];
        
        for(int i=0;i<n+1;i++)
            dp[i][0] = 0;
        
        for(int j=1;j<target+1; j++)
            dp[0][j] = INT_MAX - 1;
        
        for(int i=1;i<n+1;i++)
        {
            for(int j =1;j<target+1; j++)
            {
                if(j >= perfect[i-1])
                    dp[i][j] = min( 1 + dp[i][j - perfect[i-1]], dp[i-1][j]);
                
                else
                    dp[i][j] = dp[i-1][j];
            }
            
        }
        
        return dp[n][target];
        
//         if(target == 0)
//             return 0;
        
//         if(target < 0)
//             return INT_MAX;
        
//         if(n == 0)
//             return INT_MAX;
        
//         if(target >= perfect[n-1])
//         {
//             return min(1 + minCoinChange(perfect, n, target-perfect[n-1]), minCoinChange(perfect, n-1, target));
//         }
        
//         else
//         {
//             return minCoinChange(perfect, n-1, target);
//         }
    }
    
    int numSquares(int n) {
        
        vector<int> perfect;
        
        for(int i =1; i*i <= n; i++)
        {
            perfect.push_back(i * i);
        }
        
        return minCoinChange(perfect, perfect.size(), n);
    }
};

// 1. find all the perfect square till that number
// 2. do minimum coin change with n as sum and that array as change values