class Solution {
public:
    
    int combinationSum4Util(vector<int> nums, int target)
    {
        if(target == 0)
        {
            return 1;
        }
        
        if(target < 0)
            return 0;
        
//         for(int i=0;i<nums.size();i++)
//         {
//             if(target >= nums[i])                                    // RECURSIVE APPROACH USE ANSWER++
            // combinationSum4Util(nums, target - nums[i], answer);     // IN BASE CONDITION AND VOID AS RETURN
//         }
        
        
        vector<unsigned int> dp(target+1,0);
        
        
        dp[0] = 1;
        
        for(int i=1;i<target+1;i++)
        {
            for(int j =0; j<nums.size(); j++)
            {
                 if(i - nums[j] >= 0)
                    dp[i] += dp[i - nums[j]]; 
            }
        }
        
        return dp[target];
    }
    
    int combinationSum4(vector<int>& nums, int target) {
        
        if(nums.size() == 0)
            return 0;
        
         int answer = 0;
         return combinationSum4Util(nums, target);
        
        return answer;
    }
    
};

// 1 2 3  target = 4
// 