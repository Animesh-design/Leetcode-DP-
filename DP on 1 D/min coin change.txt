class Solution {
public:
    
    int minCoin(vector<int> coins, int n, int amount)
    {
        int dp[n+1][amount+1];
        
        for(int i=0;i<n+1;i++)
            dp[i][0] = 0;
        
        for(int j = 1;j<amount+1; j++)
            dp[0][j] = INT_MAX -1;
        
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<amount+1;j++)
            {
                if(coins[i-1] <= j)
                    dp[i][j] = min ( 1 + dp[i][j - coins[i-1]], dp[i-1][j]);
                
                else
                    dp[i][j] = dp[i-1][j];
            }
        }
        
        return dp[n][amount];
        
//         if(amount == 0)
//             return 0;
        
//         if(amount< 0 || n == 0)
//             return INT_MAX -1;
      
//         if(coins[n-1] <= amount)
//         {
//             return min ( 1 + minCoin(coins, n, amount - coins[n-1]), minCoin(coins, n-1, amount));
//         }
        
//         else
//             return  minCoin(coins, n-1, amount);
    }
    
    int coinChange(vector<int>& coins, int amount) {
      
        
        int temp =  minCoin(coins, coins.size(), amount);
        
      
        if(temp == INT_MAX-1)
            return -1;
        
        return temp;
    }
};
// 1 2 5