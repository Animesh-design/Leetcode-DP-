class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
    
        int n = triangle.size();
        
        vector<vector<int>> dp(n);
      
        dp[n-1] = triangle[n-1];
        
        for(int i = n-2; i>=0; i--)
        {
            vector<int> curr(triangle[i].size());
            
            for(int j =0; j<triangle[i].size(); j++)
            {
                 curr[j] = (triangle[i][j] + min(dp[i+1][j], dp[i+1][j+1]));
            }
            dp[i] = curr;
        }
        
       vector<int> temp2 = dp[0];
        
        int temp = temp2[0];
        
        return temp;
    }
};

//      2
//    3   4
//   6  5   7
//  4  1  8  3

//       11
//      9  10
//     7 6  10  i = 2, j = 3
//   4  1  8  3 i =3, j = 4;

// algorithm
// we will traverse from the second last and see check if the next row i is in bound
//  and find the minimum from the current dp of size

//   step 1 : fill the last row of the dp array with the triangle 
//   step 2 : from the second last row we will check 