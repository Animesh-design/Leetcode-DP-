class Solution {
public:
    
    int answer = INT_MAX;
    
    int MinPathSum( vector<vector<int>>& grid, int x, int y, int n, int m, int result)
    {
        
        if( n == 0 && m == 0)
            return 0;
        
        if(n ==1 && m == 1)
            return grid[0][0];
        
        int dp[n][m];
        
        dp[0][0] = grid[0][0];
        
        for(int i=1;i<n;i++)
            dp[i][0] = grid[i][0] + dp[i-1][0];
        
        for(int j = 1; j<m; j++)
            dp[0][j] = grid[0][j] + dp[0][j-1];
        
        for(int i=1;i<n;i++)
        {
            for(int j =1; j<m ; j++)
            {
                dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]);
            }
        }
        
        return dp[n-1][m-1];
        
//          if(x<0 || y<0 || x>=n || y>= m)
//             return;
        
//         if(x == n-1 && y == m-1)
//         {
//             result += grid[n-1][m-1];
            
//             answer = min(answer, result);
//             return ;
//         }
        
       
        
//         result += grid[x][y];
        
//         MinPathSum(grid, x+1, y, n,m, result);
//         MinPathSum(grid, x, y+1, n, m, result);
        
    }
    int minPathSum(vector<vector<int>>& grid) {
        
        int n = grid.size();
        int m = grid[0].size();
        
        int result = 0;
        
         return MinPathSum(grid, 0, 0, n, m, result);
        
        // return answer;
    }
};