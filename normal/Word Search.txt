class Solution {
public:

    bool DFS(int x, int y, vector<vector<char>> &board, string word, int n, int m, int count)
    {
//          BC   .....
         if(count == word.size())
            return true;
     
        
        if(x < 0 || y < 0 || x >= n || y >= m || board[x][y] != word[count] || board[x][y] == '$')
            return false;
        
        char curr = board[x][y] ;
        
        board[x][y] = '$';
        
        bool answer = false;
        
        answer = answer  || DFS(x+1, y, board, word, n, m,count+1)
                         || DFS(x, y+1, board, word, n, m,count+1)
                         || DFS(x-1, y, board, word, n, m,count+1)
                         || DFS(x, y-1, board, word, n, m,count+1);
       
        board[x][y] = curr;
        
        return answer;
    }
    
    bool exist(vector<vector<char>>& board, string word) {
        
        if(word.empty())
            return true;
        
        if(board.empty())
            return false;
        
         int n = board.size();
         int m = board[0].size();
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(board[i][j] == word[0] && DFS(i,j,board,word,n,m, 0))
                {
                        return true;
                }
            }
        }
        
        return false;
        
    }
};

//     A B C E
//     S F C S
//     A D E E

// ABCCEDE
//                  ALGORITHM
//                  ---------
// We will traverse each element of the word and we will see that can we find that whole word in the grid or not
// 

//                  IMPLEMENTATION
//                  --------------

// we will see if the first word matches in the grid then we will do DFS from that word of the whole grid and it it return true then we can say that we have found the word in the grid.