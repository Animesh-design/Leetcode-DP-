class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        
        int count = 0;
      
        unordered_map<int,int> mp;
        mp[0] = 1;
        
        int curr_sum = 0;
        
        for(int i=0;i<nums.size();i++)
        {
            curr_sum += nums[i];
            
            if(mp.find(curr_sum-k) != mp.end())
               count += mp[curr_sum-k];
            
            mp[curr_sum]++;
        }
        
        return count;
    }
};

// so what we have done here is we have made a current sum and checked if we have current sum - k already present in our map that means that we already have a subarray with current sum - k so we have found another subarray and hence we increment the counter

// 3 4 7 2 -3 1 4 2
// 1 1 1
// 1 2 3


// 1 3 6
